default_platform :ios

class Config
  TARGETS = {
    store: {
      app_identifier: "watch.cut",
    }
  }
end

module FastlaneHelpers
  module_function

  def download_all_profiles(readonly, type, renew)
    identifiers = Config::TARGETS.map { |k, v| v[:app_identifier] }
    match(app_identifier: identifiers,
          readonly: readonly,
          type: type,
          shallow_clone: 1,
          git_full_name: 'Fastlane Match',
          git_user_email: 'match@fastlane.tools',
          force: renew)
  end

  def renew_certificates(type)
    nuke_type = type == "appstore" ? "distribution" : type
    sh "fastlane match nuke #{nuke_type} --skip_confirmation -a #{Config::TARGETS[:store][:app_identifier]} --git_full_name 'Fastlane Match' --git_user_email 'match@fastlane.tools'"

    # renew all profiles too since they'll be invalid now
    identifiers = Config::TARGETS.map { |k, v| v[:app_identifier] }
    match(app_identifier: identifiers,
          readonly: false,
          type: type,
          shallow_clone: 1,
          git_full_name: 'Fastlane Match',
          git_user_email: 'match@fastlane.tools')
  end
end

extend FastlaneHelpers

platform :ios do
  ###############################################################
  # CI
  ###############################################################
  lane :ci do
    scan(
      scheme: 'Local',
      devices: ['iPhone X'],
      skip_build: true
    )

    if `git rev-parse --abbrev-ref HEAD`.strip == 'master'
      if ENV["MATCH_KEYCHAIN_NAME"] != nil && ENV["MATCH_PASSWORD"] != nil
        create_keychain(
          name: ENV["MATCH_KEYCHAIN_NAME"],
          password: ENV["MATCH_PASSWORD"],
          default_keychain: true,
          unlock: true,
          timeout: 3600,
          add_to_search_list: true
        )

        download_all_store_profiles

        # Stop prompt for allowing access to cert
        sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{ENV["MATCH_PASSWORD"]} #{ENV["MATCH_KEYCHAIN_NAME"]}")
      end

      store
    end
  end

  ###############################################################
  # Deployment
  ###############################################################
  lane :store do
    sh("git status")
    ensure_git_status_clean
    ensure_git_branch branch: 'master'
    gym scheme: 'Cut'
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV" # https://github.com/fastlane-old/deliver/issues/235
    pilot(distribute_external:                  false,
          skip_submission:                      true,
          skip_waiting_for_build_processing:    true)

    clean_build_artifacts
  end

  ###############################################################
  # Code Signing
  ###############################################################
  lane :renew_certificates do
    puts ''
    puts '##################################'
    puts 'WARNING - All profiles and certificates are going to be removed (except push certs)'
    puts '##################################'
    puts ''

    renew_certificates("development")
    renew_certificates("appstore")
  end

  lane :download_all_dev_profiles do
      download_all_profiles(true, "development", false)
  end

  lane :download_all_store_profiles do
      download_all_profiles(true, "appstore", false)
  end

  lane :download_all_profiles do
      download_all_dev_profiles
      download_all_store_profiles
  end

  lane :renew_all_dev_profiles do
      download_all_profiles(false, "development", true)
  end

  lane :renew_all_store_profiles do
      download_all_profiles(false, "appstore", true)
  end

  lane :renew_all_profiles do
      renew_all_dev_profiles
      renew_all_store_profiles
  end

  lane :renew_push_certs do
    Config::TARGETS.each do |k, v|
      pem(
        force: true,
        development: true,
        app_identifier: v[:app_identifier]
      )

      pem(
        force: true,
        development: false,
        app_identifier: v[:app_identifier]
      )
      renew_all_profiles
    end
  end
  ###############################################################
end


# More information about multiple platforms in fastlane:
# https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
